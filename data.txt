Нужные функции
    Регистрация пользователя
        Валидация email / телефона
            проверка корректности номера или почты
        Хеширование пароля (например, bcrypt, Argon2)
        Подтверждение email/SMS (опционально)
    Аутентификация
        По логину и паролю
        По внешнему провайдеру (OAuth2 — Google, Facebook и т.д.)
        По токену (JWT, session)
    Выдача и валидация токенов
        Access token (короткоживущий)
        Refresh token (долгоживущий)
    Выход из системы
        Инвалидация токенов
        Очистка сессий
    Защита от атак
        Rate limiting
        Защита от брутфорса (например, через CAPTCHA, задержку)
        Защита CSRF и XSS
        CORS
    Роли и разрешения
        Роль администратора, пользователя, модератора и т.д.
        Политики доступа
    Аудит
        Логи входов, попыток, изменений данных и пр.

Go (Gin) — быстро и безопасно
PostgreSQL / MySQL — для пользователей, токенов
Redis — для хранения временных токенов, rate limiting
bcrypt / Argon2 — хеширование паролей
JWT — токены (auth + refresh)
Traefik / NGINX — TLS/SSL termination
Fail2Ban / Cloudflare — защита от атак
Traefik / NGINX — TLS/SSL termination


1. Модель (model) - определяет структуры данных
2. Репозиторий (repository) - работа с хранилищем данных
3. Сервис (service) - бизнес-логика
4. Обработчик/контроллер (handler) - API интерфейс

В jwt можно класть инфу (не важную) для получения без обращения к бд

fail2ban
https://github.com/go-chi/httprate

ctx context.Context позволяет ставить таймер операциям или отменять их



Валидация токенов:
    Добавлена проверка, что refresh token принадлежит пользователю
    Проверка срока действия access token перед добавлением в blacklist
Безопасность:
    Access token теперь берется из заголовка Authorization
    Refresh token из тела запроса
    Проверка формата заголовка Authorization
Очистка:
    Удаление всех сессий пользователя (опционально)
    Добавление access token в blacklist
Обработка ошибок:
    Более информативные сообщения об ошибках
    Разделение ошибок клиента и сервера

    Rate limiting - защита от brute force атак
    Двухфакторная аутентификация при выходе
    Логирование событий выхода
    Webhook-уведомления о выходе
    Device tracking - возможность выходить с конкретного устройства


    Access Token:
    Хранится на клиенте (localStorage/HTTP-only cookie)
    Короткий срок жизни (15-30 мин)
    Проверяется при каждом запросе
    Refresh Token:
    Хранится в БД (с привязкой к пользователю)
    Долгий срок жизни (7 дней)
    HTTP-only cookie (для защиты от XSS)
    Blacklist:
    Redis с TTL = времени жизни токена
    Быстрая проверка при каждом запросе
    Безопасность:
    Все токены подписываются (HS256/RS256)
    Refresh Token привязан к устройству (можно добавить fingerprint)


   Функция	Нужна ли реализация в бэке?	Где именно реализуется?
   Rate limiting	✅ Да	На бэке (Redis + Middleware или прокси типа Nginx/Traefik)
   Брутфорс защита	✅ Да	На бэке (через задержки, CAPTCHA-триггеры, счетчики)
   CSRF защита	⚠️ Да, если токены в cookie	На бэке (SameSite, CSRF token), а часть — на фронте
   XSS защита	⚠️ Нет, в основном фронт	HTML/JS-фильтрация, контекстное экранирование
   CORS	✅ Да	На бэке (через настройки Access-Control-Allow-*)